
Asignar cadena+=" "
Asignar 0 a i
Asignar 0 a j
Asignar " " a aux
Asignar tokens=[]
Asignar 0 a cparentesis

Mientras verdadero hacer:
  Si i menor a largo de la cadena entonces
    Si cadena en i es '""' entonces
      Mientras .
        si i+j es igual a largo de la cadena entonces
          Imprimir "ERROR 0"
          Salir del ciclo
        Asignar aux+ = cadena en i+j
        Sumar 1 a j
      Si cadena en i+j+1 no es " ", "(", ")", o "=" entonces
        Imprimir "ERROR 1"
        Salir del ciclo
      Sino
        Agregar "<CADENA>" a tokens
    Sino si cadena en i es alfa entonces
      Mientras cadena en i+j sea alfa hacer
        Asignar aux+ = cadena en i+j
        Sumar 1 a j
      Si cadena en i+j no es " ", "(", ")", "=", "<", o ">" entonces
        Imprimir "ERROR 2"
        Salir del ciclo
      Sino
        Si aux es "and", "or", o "not" entonces
          Agregar "<OPLOG>" a tokens
        Sino si aux es "true", o "false" entonces
          Agregar "<BOOL>" a tokens
        Sino si aux es "define" entonces
          Agregar "<DEFINE>" a tokens
        Sino si aux es "if" entonces
          Agregar "<IF>" a tokens
        Sino si aux es "set" entonces
          Agregar "<SET>" a tokens
        Sino agregar "<ID>" a tokens
      
    Sino si cadena en i es digito entonces
      Mientras cadena en i+j sea digito hacer
        aux+ = cadena en i+j
        Sumar 1 a j
      Si cadena en i+j no es  " ", "(", ")", "=", "<", ">", "+", "*", o "^" entonces
        Imprimir "ERROR 3"
        Salir del ciclo
      Sino agregar "<NUM>" a tokens
    
    Sino si cadena en i es "<", ">" o "=" entonces
      Si cadena en i+1 es "=" entonces
        Asignar 2 a j
      Sino
        Asignar 1 a j
      Agregar "<OPREL>" a tokens
   
    Sino si cadena en i es "+", "*", o "^" entonces
      Asignar 1 a j
      Agregar "<OPMAT>" a tokens
   
    Sino si la cadena en i es "(" entonces
      Asignar 1 a j
      Sumar 1 a cParentesis
      Agregar "<(>" a tokens
    
    Sino si la cadena en i es ")" entonces
      Si cParentesis es menor a 1 entonces
       Imprimir "ERROR 4"
       Salir del ciclo
      Sino
        Asignar 1 a j
        Restar 1 a cParentesis
        Agregar "<)>" a tokens
      
    Sino asignar 1 a j
    Sumar j a i
    Asignar 0 a j
    Asignar "" a aux
  Sino
    Imprimir tokens
    Salir del ciclo
    
    
